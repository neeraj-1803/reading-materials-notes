Regular Expressions Notes:

./ -> only matches whatever given, wildcard. To match hut hum hud, do like this /hu./
/I -> case insensitive
/g -> global check
/gi -> global and case insensitive
/literal/ -> to match the literal patterns
[] -> to match character classes, ex: but, bat, bit . To match do like this -> /b[eiu]t/
[]^ -> to negate.
+ -> to check the number of occurrence. In aabb -> /a+/g it will only return single a because it is continuations whereas in abab , it will return two a because they are not in continuation.
* -> to match what occurs zero or more times. So even if it occurs zero time it will return null. Else it will return the matched string.
let soccerWord = "gooooooooal!";
let gPhrase = "gut feeling";
let oPhrase = "over the moon";
let goRegex = /go*/;
It will return [gooooooooo],[g], null(because no occurrence of g in that)
?-> lazy matching, skips whatever in front of it.
^[]-> matches the first character only and returns
[]$-> to match at the end of the string.
\d -> Digit [0-9]
\D -> [^0-9]
\w -> [A-Za-z0-9_]
\W -> [^A-Za-z0-9_]